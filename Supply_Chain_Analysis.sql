CREATE database supply_chain;
use supply_chain;
select * from Supply_Chain_dataset;


#-------Identify revenue and total orders for each cohort based on Monthly_Tag:----
SELECT 
    `Monthly Tag` AS Cohort, # -- Adjusted column name with space
    COUNT(SKU) AS Total_Orders,
    SUM(`Total Revenue`) AS Total_Revenue
FROM Supply_Chain_dataset
GROUP BY `Monthly Tag`
ORDER BY STR_TO_DATE(`Monthly Tag`, '%M');

#-----Track the orders placed → delivered on time → late deliveries for each cohort.---
SELECT 
    `Monthly Tag` AS Cohort,
    COUNT(SKU) AS Total_Orders_Placed,
    SUM(CASE WHEN `Risk Status` = 'Not At Risk' THEN 1 ELSE 0 END) AS Delivered_On_Time,
    SUM(CASE WHEN `Risk Status` = 'At Risk' THEN 1 ELSE 0 END) AS Late_Deliveries
FROM Supply_Chain_dataset
GROUP BY `Monthly Tag`
ORDER BY `Monthly Tag`;

#---This query calculates the three core RFM metrics:--Recency: Maximum lead time for each supplier.--Frequency: Total number of orders for each supplier.--Monetary: Total revenue generated by each supplier.---
SELECT 
    `Supplier Name`,
    MAX(`Lead Times`) AS Recency,  -- Recent orders have higher lead times.
    COUNT(SKU) AS Frequency,       -- Total number of orders.
    SUM(`Total Revenue`) AS Monetary
FROM Supply_Chain_dataset
GROUP BY `Supplier Name`
ORDER BY Monetary DESC;

#---We’ll use SQL's NTILE function to assign scores (1-5) for each metric.--
SELECT 
    `Supplier Name`,
    NTILE(5) OVER (ORDER BY MAX(`Lead Times`) ASC) AS Recency_Score,  -- Recent = higher score
    NTILE(5) OVER (ORDER BY COUNT(SKU) DESC) AS Frequency_Score,      -- Frequent = higher score
    NTILE(5) OVER (ORDER BY SUM(`Total Revenue`) DESC) AS Monetary_Score -- High revenue = higher score
FROM Supply_Chain_dataset
GROUP BY `Supplier Name`;





